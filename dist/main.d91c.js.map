{"version":3,"sources":["webpack:///./src/components/helper.js","webpack:///./src/components/config.js","webpack:///./src/components/game.js","webpack:///./src/components/rank.js","webpack:///./src/index.js"],"names":["getRandomInt","min","max","Math","floor","random","SlidingGameConfig","game","Game","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","state","playerName","puzzle","step","isWin","isGameStart","emptyPiece","handleName","bind","movePiece","shuffle","isAnswerCorrect","checkPossibleMove","swapPiece","startGame","goEasyMode","react_default","a","Component","e","setState","currentTarget","value","targetIndex","emptyIndex","findIndex","piece","swapped","slice","_ref","player","name","updateRanking","_this2","boardRowNum","sqrt","abs","swapTimes","Array","from","length","fill","map","index","i","randomIndex","prev","current","filter","mode","_this3","num","createElement","key","onClick","disable","onChange","disabled","placeholder","className","rank","Rank","rank_classCallCheck","rank_possibleConstructorReturn","rankData","JSON","parse","localStorage","getItem","rankList","src_App","App","src_classCallCheck","src_possibleConstructorReturn","ranking","tab","window","location","pathname","playerData","push","sort","b","setItem","stringify","BrowserRouter","Link","to","Switch","Route","path","render","exact","react_dom_default","document","getElementById"],"mappings":"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","file":"main.d91c.js","sourcesContent":["export const getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n","export const SlidingGameConfig = {\n  blocks: 9 \n};\n\nexport const getCorrectPuzzle = () => {\n  return Array.from({length: 9})\n    .fill(0)\n    .map((piece, index) => index);\n};\n","import React from \"react\";\nimport {getRandomInt} from \"../components/helper.js\";\nimport {SlidingGameConfig, getCorrectPuzzle} from \"../components/config.js\";\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playerName: \"\",\n      puzzle: [1, 2, 3, 4, 5, 6, 7, 0, 8],\n      step: 0,\n      isWin: false,\n      isGameStart: false\n    };\n    this.emptyPiece = 0;\n    this.handleName = this.handleName.bind(this);\n    this.movePiece = this.movePiece.bind(this);\n    this.shuffle = this.shuffle.bind(this);\n    this.isAnswerCorrect = this.isAnswerCorrect.bind(this);\n    this.checkPossibleMove = this.checkPossibleMove.bind(this);\n    this.swapPiece = this.swapPiece.bind(this);\n    this.startGame = this.startGame.bind(this);\n    this.goEasyMode = this.goEasyMode.bind(this);\n  }\n  handleName(e) {\n    this.setState({playerName: e.currentTarget.value});\n  }\n  movePiece(targetIndex) {\n    let emptyIndex = this.state.puzzle.findIndex(piece => piece === 0);\n\n    // base case\n    if (targetIndex === emptyIndex) return;\n\n    if (this.checkPossibleMove(targetIndex)) {\n      this.swapPiece(targetIndex, emptyIndex);\n    }\n  }\n  swapPiece(targetIndex, emptyIndex) {\n    let swapped = this.state.puzzle.slice(0);\n\n    // swap current piece and emptyPiece\n    [swapped[targetIndex], swapped[emptyIndex]] = [\n      swapped[emptyIndex],\n      swapped[targetIndex]\n    ];\n\n    // check if answer is correct after swapped\n    if (this.isAnswerCorrect(swapped)) {\n      this.setState({isWin: true, isGameStart: false});\n      let player = {};\n      player.name = this.state.playerName;\n      player.step = this.state.step + 1;\n      this.props.updateRanking(player);\n    }\n\n    this.setState({puzzle: swapped, step: this.state.step + 1});\n  }\n  checkPossibleMove(targetIndex) {\n    let emptyIndex = this.state.puzzle.findIndex(\n      piece => piece === this.emptyPiece,\n    );\n\n    let boardRowNum = Math.sqrt(SlidingGameConfig.blocks);\n\n    // check if in same row, then check if in the same column;\n    // piece in the same column should have same remaining, in the same row should have\n    // same quotient\n    return (\n      (Math.abs(targetIndex - emptyIndex) === boardRowNum &&\n                targetIndex % boardRowNum === emptyIndex % boardRowNum) ||\n            (Math.abs(targetIndex - emptyIndex) === 1 &&\n                Math.floor(targetIndex / boardRowNum) ===\n                    Math.floor(emptyIndex / boardRowNum))\n    );\n  }\n  shuffle() {\n    let shuffleTimes = 1000;\n\n    // make sure they are swapped even times\n    let swapTimes = Math.floor(Math.random() * shuffleTimes) * 2,\n      puzzle = getCorrectPuzzle(),\n      i = 0;\n\n    while (i < swapTimes) {\n      // handle swap boundary;\n      let randomIndex = getRandomInt(1, SlidingGameConfig.blocks - 1);\n      let prev = puzzle[randomIndex - 1],\n        current = puzzle[randomIndex];\n\n      // swap two adjacent piece\n      puzzle[randomIndex] = prev;\n      puzzle[randomIndex - 1] = current;\n\n      i++;\n    }\n    this.setState({puzzle: puzzle});\n  }\n  isAnswerCorrect(puzzle) {\n    return (\n      puzzle\n        .slice(0, SlidingGameConfig.blocks - 1)\n        .filter((piece, index) => +piece !== index + 1).length === 0\n    );\n  }\n  startGame(mode) {\n\n    // reset state\n    this.setState({isGameStart: true, isWin: false, step: 0});\n\n    if (mode === \"easy\") {\n      this.goEasyMode();\n    } else {\n      this.shuffle();\n    }\n  }\n  goEasyMode() {\n    this.setState({puzzle: [1, 2, 3, 4, 5, 6, 7, 0, 8]});\n  }\n\n  render() {\n    let puzzle = this.state.puzzle.map((num, index) => (\n      <div key={index} onClick={() => this.movePiece(index)}>\n        <span> {num !== this.emptyPiece ? num : \"\"} </span>\n      </div>\n    ));\n    let disable = !this.state.playerName.length || this.state.isGameStart;\n    return (\n      <div>\n        <input\n          value={this.state.playerName}\n          onChange={this.handleName}\n          disabled={this.state.isGameStart}\n          placeholder=\"You name\"\n        />\n        <button\n          disabled={disable}\n          onClick={() => this.startGame(\"hard\")}>\n                    Start\n        </button>\n        <button\n          disabled={disable}\n          onClick={() => this.startGame(\"easy\")}>\n                    Easy\n        </button>\n\n        <div className=\"step\">Step: {this.state.step}</div>\n        <section className={this.state.isGameStart ? \"game-on\" : \"\"}>\n          <div className=\"puzzle\"> {puzzle}</div>\n          <div className=\"overlay\"> </div>\n\n          <div className={this.state.isWin ? \"ko\" : \"not-ko\"}>\n            <div className=\"ko-wrapper\">\n              <div className=\"large\">KO</div>\n              <div>去看看你的排名吧</div>\n            </div>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nexport default class Rank extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    let rankData = JSON.parse(localStorage.getItem(\"rank\")) || [];\n    let rankList = rankData.map((player, index) => {\n      return (\n        <div className=\"player-row\" key={index}>\n          <div>{index + 1}</div>\n          <div>{player.name}</div>\n          <div>{player.step}</div>\n        </div>\n      );\n    });\n    if (!rankData.length) {\n      return <div>還沒有人來玩也</div>;\n    }\n    return (\n      <div>\n        <div className=\"player-row\">\n          <div>Rank </div>\n          <div>Name</div> <div>Step</div>\n        </div>\n        {rankList}\n      </div>\n    );\n  }\n}\n","import \"./style/main.scss\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {BrowserRouter, Link, Route, Switch} from \"react-router-dom\";\nimport Game from \"./components/game.js\";\nimport Rank from \"./components/rank.js\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ranking: [],\n      tab: window.location.pathname\n    };\n    this.updateRanking = this.updateRanking.bind(this);\n  }\n  updateRanking(playerData) {\n    if (!playerData) return;\n\n    let localStorage = window.localStorage,\n      rankData = JSON.parse(localStorage.getItem(\"rank\"));\n\n    if (!rankData) {\n      rankData = [playerData];\n    } else {\n      rankData.push(playerData);\n      rankData.sort((a, b) =>   +a[\"step\"] - +b[\"step\"] );\n    }\n    localStorage.setItem(\"rank\", JSON.stringify(rankData));\n  }\n  updateState(state) {\n    this.setState(state);\n  }\n\n  render() {\n    return (\n      <main>\n        <BrowserRouter>\n          <div>\n            <div className=\"tab\">\n              <Link\n                onClick={() => this.setState({tab: \"/\"})}\n                className={\n                  this.state.tab === \"/\" ? \"active\" : \"\"\n                }\n                to=\"/\">\n                                Game\n              </Link>\n              <Link\n                onClick={() => this.setState({tab: \"/rank\"})}\n                className={\n                  this.state.tab === \"/rank\" ? \"active\" : \"\"\n                }\n                to=\"/rank\">\n                                Rank\n              </Link>\n            </div>\n            <Switch>\n              <Route\n                path=\"/\"\n                render={() => (\n                  <Game updateRanking={this.updateRanking} />\n                )}\n                exact\n              />\n              <Route\n                path=\"/rank\"\n                exact\n                render={props => <Rank {...props} />}\n              />\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </main>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"main\"));\n"],"sourceRoot":""}